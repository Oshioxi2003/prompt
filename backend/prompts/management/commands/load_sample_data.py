from django.core.management.base import BaseCommand
from prompts.models import Category, Tag, Prompt

class Command(BaseCommand):
    help = 'Load sample data for prompt library'

    def handle(self, *args, **options):
        self.stdout.write(self.style.SUCCESS('Loading sample data...'))
        
        # Create Categories
        categories_data = [
            {
                'name': 'L√†m Video - Hi·ªáu AI', 
                'description': 'T·∫°o video v·ªõi AI, hi·ªáu ·ª©ng v√† content s√°ng t·∫°o',
                'icon_emoji': 'üé¨',
                'color': '#EF4444',
                'order': 1,
                'is_featured': True
            },
            {
                'name': 'VƒÉn h√†nh', 
                'description': 'Qu·∫£n l√Ω v√† v·∫≠n h√†nh doanh nghi·ªáp hi·ªáu qu·∫£',
                'icon_emoji': '‚öôÔ∏è',
                'color': '#3B82F6',
                'order': 2,
                'is_featured': True
            },
            {
                'name': 'Nh√¢n s·ª±', 
                'description': 'Qu·∫£n l√Ω nh√¢n s·ª± v√† ph√°t tri·ªÉn ƒë·ªôi ng≈©',
                'icon_emoji': 'üë•',
                'color': '#10B981',
                'order': 3,
                'is_featured': True
            },
            {
                'name': 'D∆∞·ª£c Ph·∫©m', 
                'description': 'Th√¥ng tin v√† t∆∞ v·∫•n v·ªÅ d∆∞·ª£c ph·∫©m',
                'icon_emoji': 'üíä',
                'color': '#8B5CF6',
                'order': 4,
                'is_featured': True
            },
            {
                'name': 'Phong Th·ªßy', 
                'description': 'T∆∞ v·∫•n phong th·ªßy v√† phong t·ª•c',
                'icon_emoji': 'üîÆ',
                'color': '#F59E0B',
                'order': 5,
                'is_featured': True
            },
            {
                'name': 'Sales', 
                'description': 'B√°n h√†ng v√† chƒÉm s√≥c kh√°ch h√†ng',
                'icon_emoji': 'üí∞',
                'color': '#EC4899',
                'order': 6,
                'is_featured': True
            },
            {
                'name': 'Gi√°o D·ª•c', 
                'description': 'H·ªó tr·ª£ gi·∫£ng d·∫°y v√† h·ªçc t·∫≠p',
                'icon_emoji': 'üìö',
                'color': '#06B6D4',
                'order': 7,
                'is_featured': True
            },
            {
                'name': 'Marketing', 
                'description': 'Chi·∫øn l∆∞·ª£c marketing v√† qu·∫£ng c√°o',
                'icon_emoji': 'üì¢',
                'color': '#F97316',
                'order': 8,
                'is_featured': True
            },
            {
                'name': 'Kh·ªüi Nghi·ªáp', 
                'description': 'H·ªó tr·ª£ kh·ªüi nghi·ªáp v√† ph√°t tri·ªÉn business',
                'icon_emoji': 'üöÄ',
                'color': '#84CC16',
                'order': 9,
                'is_featured': True
            },
        ]
        
        categories = {}
        for cat_data in categories_data:
            category, created = Category.objects.get_or_create(
                name=cat_data['name'],
                defaults={
                    'description': cat_data['description'],
                    'icon_emoji': cat_data['icon_emoji'],
                    'color': cat_data['color'],
                    'order': cat_data['order'],
                    'is_featured': cat_data['is_featured'],
                }
            )
            categories[cat_data['name']] = category
            if created:
                self.stdout.write(f'Created category: {category.name}')

        # Create Tags
        tags_data = [
            {'name': 'vi·∫øt l√°ch', 'color': '#10B981'},
            {'name': 's√°ng t·∫°o', 'color': '#8B5CF6'},
            {'name': 'truy·ªán', 'color': '#F59E0B'},
            {'name': 'ti·∫øng anh', 'color': '#3B82F6'},
            {'name': 'h·ªçc t·∫≠p', 'color': '#EF4444'},
            {'name': 'giao ti·∫øp', 'color': '#06B6D4'},
            {'name': 'python', 'color': '#10B981'},
            {'name': 'l·∫≠p tr√¨nh', 'color': '#8B5CF6'},
            {'name': 'code', 'color': '#F59E0B'},
            {'name': 'marketing', 'color': '#3B82F6'},
            {'name': 'content', 'color': '#EF4444'},
            {'name': 'social media', 'color': '#06B6D4'},
            {'name': 'data', 'color': '#10B981'},
            {'name': 'ph√¢n t√≠ch', 'color': '#8B5CF6'},
            {'name': 'bi·ªÉu ƒë·ªì', 'color': '#F59E0B'},
            {'name': 'ui', 'color': '#3B82F6'},
            {'name': 'ux', 'color': '#EF4444'},
            {'name': 'thi·∫øt k·∫ø', 'color': '#06B6D4'},
        ]
        
        tags = {}
        for tag_data in tags_data:
            tag, created = Tag.objects.get_or_create(
                name=tag_data['name'],
                defaults={'color': tag_data['color']}
            )
            tags[tag_data['name']] = tag
            if created:
                self.stdout.write(f'Created tag: {tag.name}')

        # Create Prompts
        prompts_data = [
            {
                'title': 'Prompt vi·∫øt truy·ªán ng·∫Øn',
                'description': 'Gi√∫p b·∫°n t·∫°o ra truy·ªán ng·∫Øn s√°ng t·∫°o v·ªõi c·ªët truy·ªán h·∫•p d·∫´n.',
                'prompt_text': '''H√£y vi·∫øt m·ªôt truy·ªán ng·∫Øn v·ªõi c√°c y√™u c·∫ßu sau:
- ƒê·ªô d√†i: 500-800 t·ª´
- Th·ªÉ lo·∫°i: [Th·ªÉ lo·∫°i b·∫°n mu·ªën]
- Nh√¢n v·∫≠t ch√≠nh: [M√¥ t·∫£ nh√¢n v·∫≠t]
- B·ªëi c·∫£nh: [Th·ªùi gian v√† ƒë·ªãa ƒëi·ªÉm]
- Xung ƒë·ªôt: [V·∫•n ƒë·ªÅ c·∫ßn gi·∫£i quy·∫øt]

H√£y t·∫°o ra m·ªôt c√¢u chuy·ªán c√≥ c·∫•u tr√∫c r√µ r√†ng v·ªõi m·ªü ƒë·∫ßu h·∫•p d·∫´n, ph·∫ßn gi·ªØa cƒÉng th·∫≥ng v√† k·∫øt th√∫c ·∫•n t∆∞·ª£ng.''',
                'category': 'L√†m Video - Hi·ªáu AI',
                'difficulty': 'easy',
                'tags': ['vi·∫øt l√°ch', 's√°ng t·∫°o', 'truy·ªán']
            },
            {
                'title': 'Prompt h·ªçc ti·∫øng Anh',
                'description': 'H·ªó tr·ª£ luy·ªán t·∫≠p ti·∫øng Anh v·ªõi AI m·ªôt c√°ch hi·ªáu qu·∫£.',
                'prompt_text': '''T√¥i mu·ªën luy·ªán t·∫≠p ti·∫øng Anh. H√£y gi√∫p t√¥i:

1. T·∫°o ra 5 c√¢u h·ªôi tho·∫°i th·ª±c t·∫ø v·ªÅ ch·ªß ƒë·ªÅ: [Ch·ªß ƒë·ªÅ]
2. Gi·∫£i th√≠ch c√°c c·∫•u tr√∫c ng·ªØ ph√°p ƒë∆∞·ª£c s·ª≠ d·ª•ng
3. ƒê∆∞a ra 10 t·ª´ v·ª±ng quan tr·ªçng k√®m v√≠ d·ª•
4. T·∫°o b√†i t·∫≠p th·ª±c h√†nh v·ªõi ƒë√°p √°n

M·ª©c ƒë·ªô: [Beginner/Intermediate/Advanced]
T√¨nh hu·ªëng: [M√¥ t·∫£ t√¨nh hu·ªëng c·ª• th·ªÉ]''',
                'category': 'Gi√°o D·ª•c',
                'difficulty': 'medium',
                'tags': ['ti·∫øng anh', 'h·ªçc t·∫≠p', 'giao ti·∫øp']
            },
            {
                'title': 'Prompt l·∫≠p tr√¨nh Python',
                'description': 'Sinh m√£ Python theo y√™u c·∫ßu v·ªõi gi·∫£i th√≠ch chi ti·∫øt.',
                'prompt_text': '''H√£y vi·∫øt code Python ƒë·ªÉ:

Y√™u c·∫ßu: [M√¥ t·∫£ ch·ª©c nƒÉng c·∫ßn th·ª±c hi·ªán]
Input: [ƒê·ªãnh d·∫°ng d·ªØ li·ªáu ƒë·∫ßu v√†o]
Output: [K·∫øt qu·∫£ mong mu·ªën]

Y√™u c·∫ßu th√™m:
- Vi·∫øt code s·∫°ch, c√≥ comment
- X·ª≠ l√Ω exception
- Optimize performance
- Vi·∫øt unit test
- Gi·∫£i th√≠ch logic t·ª´ng b∆∞·ªõc

V√≠ d·ª• s·ª≠ d·ª•ng:
[ƒê∆∞a ra v√≠ d·ª• c·ª• th·ªÉ]''',
                'category': 'Kh·ªüi Nghi·ªáp',
                'difficulty': 'hard',
                'tags': ['python', 'l·∫≠p tr√¨nh', 'code']
            },
            {
                'title': 'Prompt Marketing Content',
                'description': 'T·∫°o n·ªôi dung marketing hi·ªáu qu·∫£ cho social media.',
                'prompt_text': '''T·∫°o campaign marketing cho:

S·∫£n ph·∫©m/D·ªãch v·ª•: [T√™n v√† m√¥ t·∫£]
Target Audience: [ƒê·ªëi t∆∞·ª£ng kh√°ch h√†ng]
Platform: [Facebook/Instagram/LinkedIn/TikTok]
M·ª•c ti√™u: [Awareness/Engagement/Conversion]

H√£y t·∫°o:
1. 5 post content v·ªõi hashtag
2. 3 story template
3. 1 video script (60 gi√¢y)
4. Email marketing template
5. Call-to-action suggestions

Tone: [Professional/Friendly/Humorous]
Budget: [High/Medium/Low]''',
                'category': 'Marketing',
                'difficulty': 'medium',
                'tags': ['marketing', 'content', 'social media']
            },
            {
                'title': 'Prompt Ph√¢n t√≠ch d·ªØ li·ªáu',
                'description': 'H∆∞·ªõng d·∫´n ph√¢n t√≠ch v√† tr·ª±c quan h√≥a d·ªØ li·ªáu.',
                'prompt_text': '''Ph√¢n t√≠ch dataset sau:

D·ªØ li·ªáu: [M√¥ t·∫£ dataset]
M·ª•c ti√™u: [C√¢u h·ªèi c·∫ßn tr·∫£ l·ªùi]
Tools: [Python/R/Excel/Tableau]

Th·ª±c hi·ªán:
1. Exploratory Data Analysis (EDA)
2. Data cleaning v√† preprocessing
3. Statistical analysis
4. T·∫°o visualizations
5. Insights v√† recommendations
6. Predictive modeling (n·∫øu c·∫ßn)

H√£y vi·∫øt code step-by-step v·ªõi:
- Data validation
- Missing value handling
- Outlier detection
- Feature engineering
- Model evaluation metrics''',
                'category': 'D∆∞·ª£c Ph·∫©m',
                'difficulty': 'hard',
                'tags': ['data', 'ph√¢n t√≠ch', 'bi·ªÉu ƒë·ªì']
            },
            {
                'title': 'Prompt Thi·∫øt k·∫ø UI/UX',
                'description': 'T·∫°o √Ω t∆∞·ªüng v√† wireframe cho giao di·ªán ng∆∞·ªùi d√πng.',
                'prompt_text': '''Thi·∫øt k·∫ø UI/UX cho:

App/Website: [T√™n v√† m·ª•c ƒë√≠ch]
Target Users: [ƒê·ªëi t∆∞·ª£ng s·ª≠ d·ª•ng]
Platform: [Web/Mobile/Desktop]
Key Features: [Ch·ª©c nƒÉng ch√≠nh]

Deliverables:
1. User persona (2-3 personas)
2. User journey map
3. Information architecture
4. Wireframes (5-7 screens)
5. UI Style guide
6. Prototype description
7. Accessibility considerations

Design Principles:
- User-centered design
- Minimalist approach
- Consistent visual hierarchy
- Mobile-first responsive design

Tools: [Figma/Sketch/Adobe XD]''',
                'category': 'VƒÉn h√†nh',
                'difficulty': 'medium',
                'tags': ['ui', 'ux', 'thi·∫øt k·∫ø']
            }
        ]

        for prompt_data in prompts_data:
            prompt, created = Prompt.objects.get_or_create(
                title=prompt_data['title'],
                defaults={
                    'description': prompt_data['description'],
                    'prompt_text': prompt_data['prompt_text'],
                    'category': categories[prompt_data['category']],
                    'difficulty': prompt_data['difficulty'],
                    'views_count': __import__('random').randint(10, 500),
                    'likes_count': __import__('random').randint(1, 50),
                }
            )
            
            if created:
                # Add tags
                for tag_name in prompt_data['tags']:
                    if tag_name in tags:
                        prompt.tags.add(tags[tag_name])
                
                self.stdout.write(f'Created prompt: {prompt.title}')

        self.stdout.write(self.style.SUCCESS('Sample data loaded successfully!'))
        self.stdout.write(f'Created {Category.objects.count()} categories')
        self.stdout.write(f'Created {Tag.objects.count()} tags')
        self.stdout.write(f'Created {Prompt.objects.count()} prompts')
